const gulp = require('gulp');
const path = require('path');

const nodeSass = require('node-sass');
const postCss = require('postcss');
const minifyHtml = require('html-minifier').minify;

const angularInline = require('../new');

const inlineTranspilers = {
  ['.scss']: (data, callback) => {
    console.log('SASS transpile', data);
    let sassResult = nodeSass.renderSync({
      data,
      includePaths: [
        path.resolve(__dirname, 'node_modules'),
        path.resolve(__dirname, 'lib', 'src', 'styles')
      ]
    });

    postCss([
        require('autoprefixer'),
        require('postcss-flexbugs-fixes'),
        require('cssnano')({
          preset: 'advanced'
        })
      ])
      .process(sassResult.css.toString())
      .then((postCssResult) => {
        console.log('Result', postCssResult.css);
        callback(postCssResult.css);
      });
  },
  ['.html']: (data, callback) => {
    console.log('HTML transpile', data);
    let result = minifyHtml(data, {
      caseSensitive: true,
      collapseBooleanAttributes: true,
      collapseInlineTagWhitespace: true,
      collapseWhitespace: true,
      conservativeCollapse: false,
      decodeEntities: true,
      html5: true,
      includeAutoGeneratedTags: true,
      keepClosingSlash: true,
      preserveLineBreaks: false,
      preventAttributesEscaping: false,
      processConditionalComments: false,
      removeAttributeQuotes: true,
      removeComments: true
    });
    console.log('Result', result);
    callback(result);
  }
};

gulp.task('source', () => {
  gulp.src('./src/**/*.ts')
    .pipe(angularInline({
      basePath: path.resolve('src'),
      fileExts: ['html', 'scss'],
      transpilers: inlineTranspilers
    }))
    .pipe(gulp.dest('./build'));
});

gulp.task('metadata', () => {
  gulp.src('./src/**/*metadata.json')
    .pipe(angularInline({
      basePath: path.resolve('src'),
      fileExts: ['html', 'scss'],
      transpilers: inlineTranspilers
    }))
    .pipe(gulp.dest('./build'));
});